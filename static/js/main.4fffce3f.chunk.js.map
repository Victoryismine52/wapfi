{"version":3,"sources":["utils/interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["connectWallet","require","a","window","ethereum","request","method","addressArray","obj","status","address","message","target","href","getCurrentWalletConnected","length","contractABI","contractAddress","Minter","props","useState","walletAddress","setWallet","setStatus","Amount","setName","addWalletListener","on","accounts","useEffect","connectWalletPressed","walletResponse","provider","ethers","providers","Web3Provider","signer","getSigner","NFTcontract","Contract","amt","overrides","value","utils","parseEther","mintWAPFIDutchAuction","className","id","onClick","String","substring","type","placeholder","onChange","event","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4fffce3f.chunk.js","sourcesContent":["\r\n\r\nimport Web3 from 'Web3'\r\n\r\nconst contractABI = require('../contract-abi.json')\r\nconst contractAddress = \"0x3d77FF24d355ae1B46336f2f5d69cA5Fc6c814af\";\r\n\r\nexport const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const addressArray = await window.ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        const obj = {\r\n          status: \"👆🏽 Enter amount between .1 and 2 BNB.\",\r\n          address: addressArray[0],\r\n        };\r\n        return obj;\r\n      } catch (err) {\r\n        return {\r\n          address: \"\",\r\n          status: \"😥 \" + err.message,\r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        address: \"\",\r\n        status: (\r\n          <span>\r\n            <p>\r\n              {\" \"}\r\n              🦊{\" \"}\r\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                You must install Metamask, a virtual Ethereum wallet, in your\r\n                browser.\r\n              </a>\r\n            </p>\r\n          </span>\r\n        ),\r\n      };\r\n    }\r\n  };\r\n  export const getCurrentWalletConnected = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const addressArray = await window.ethereum.request({\r\n          method: \"eth_accounts\",\r\n        });\r\n        if (addressArray.length > 0) {\r\n          return {\r\n            address: addressArray[0],\r\n            status: \"👆🏽 Enter amount between .1 and 2 BNB.\",\r\n          };\r\n        } else {\r\n          return {\r\n            address: \"\",\r\n            status: \"🦊 Connect to Metamask using the top right button.\",\r\n          };\r\n        }\r\n      } catch (err) {\r\n        return {\r\n          address: \"\",\r\n          status: \"😥 \" + err.message,\r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        address: \"\",\r\n        status: (\r\n          <span>\r\n            <p>\r\n              {\" \"}\r\n              🦊{\" \"}\r\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                You must install Metamask, a virtual Ethereum wallet, in your\r\n                browser.\r\n              </a>\r\n            </p>\r\n          </span>\r\n        ),\r\n      };\r\n    }\r\n  };\r\n\r\n\r\n\r\n  export const mintNFT = async(amount) => {\r\n    //error handling\r\n    if (amount > 2 || amount < 0.1 ) { \r\n        return {\r\n            success: false,\r\n            status: \"Please enter an amount between .1 and 2\",\r\n        }\r\n    }\r\n\r\n    //load smart contract\r\n    window.contract = await new window.web3.eth.Contract(contractABI, contractAddress);//loadContract();\r\n    //set up your Ethereum transaction\r\n    const transactionParameters = {\r\n        to: contractAddress, // Required except during contract publications.\r\n        from: window.ethereum.selectedAddress, // must match user's active address.\r\n        'data': window.contract.methods.mintWAPFIDutchAuction(amount).encodeABI() //make call to NFT smart contract \r\n    };\r\n\r\n\r\n\r\n    //sign transaction via Metamask\r\n    try {\r\n        const txHash = await window.ethereum\r\n            .request({\r\n                method: 'eth_sendTransaction',\r\n                params: [transactionParameters],\r\n            });\r\n        return {\r\n            success: true,\r\n            status: \"✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            status: \"😥 Something went wrong: \" + error.message\r\n        }\r\n    }\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { ethers, Wallet } from \"ethers\";\r\n\r\nimport { \r\n  connectWallet,\r\n  getCurrentWalletConnected,\r\n  mintNFT\r\n} from \"./utils/interact.js\";\r\n\r\n\r\nconst contractABI = require('./contract-abi.json');\r\nconst contractAddress = \"0x3d77FF24d355ae1B46336f2f5d69cA5Fc6c814af\";\r\n\r\nconst isTestnet = false;\r\nconst PresentsAddress = \"0x122d9373Ea033d094806e0A924F06132356284Bb\"\r\n\r\nconst CreaturesAddress = \"0x8C53eD6B01946582750deA74300Edbcb021cA90b\";\r\n\r\nconst URI = isTestnet ? \"https://ipfs-nfts.mypinata.cloud/ipfs/QmQmJZ2ZyXdUvXaXh5o7EMYytjwBDXfZU93zCU7ewAAPeZ/\" : \"https://ipfs-nfts.mypinata.cloud/ipfs/QmTt8Z9qLN6VhVnk3xbLvCk5SgjHkDZNKWoDeHnQypE5PZ/\";\r\nconst ChainID = isTestnet ? \"0x61\" : \"0x38\";  // BSC Mainnet: 0x38 and Testnet 0x61\r\nconst ChainName = isTestnet ? \"BSC Testnet\" : \"BSC Mainnet\";\r\nconst ChainParams = [{\r\n    chainId: ChainID,\r\n    chainName: isTestnet ? 'BSC Testnet' : 'BSC Mainnet',\r\n    nativeCurrency: {\r\n      name: 'BNB',\r\n      symbol: 'BNB',\r\n      decimals: 18\r\n    },\r\n    rpcUrls: [isTestnet ? 'https://data-seed-prebsc-1-s1.binance.org:8545/': 'https://bsc-dataseed3.binance.org/'],\r\n    blockExplorerUrls: [isTestnet ? 'https://testnet.bscscan.com/' : 'https://bscscan.com/']\r\n  }]\r\n\r\n\r\nvar Signer = false;\r\n\r\nfunction setContracts(signer) {\r\n const NFT = new ethers.Contract(contractAddress,contractABI,signer);\r\n}\r\n\r\n\r\n\r\nconst Minter = (props) => {\r\n\r\n  //State variables\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [Amount, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [url, setURL] = useState(\"\");\r\n \r\n  useEffect(async () => { \r\n    const {address, status} = await getCurrentWalletConnected();\r\n    setWallet(address)\r\n    setStatus(status);\r\n\r\n    addWalletListener();\r\n  }, []);\r\n \r\n  async function WAPFimint() {\r\n    const account = await getCurrentAccount();\r\n    const mint = await window.contract.methods.mintWAPFIDutchAuction(Amount).send({ from: account});\r\n  }\r\n\r\n  async function getCurrentAccount() {\r\n    const accounts = await window.web3.eth.getAccounts();\r\n    return accounts[0];\r\n  };\r\n\r\n\r\n  function addWalletListener() {\r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setWallet(accounts[0]);\r\n          setStatus(\"👆🏽 Enter an amount between .1 and 2 BNB.\");\r\n        } else {\r\n          setWallet(\"\");\r\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n        }\r\n      });\r\n    } else {\r\n      setStatus(\r\n        <p>\r\n          {\" \"}\r\n          🦊{\" \"}\r\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n            You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.\r\n          </a>\r\n        </p>\r\n      );\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const connectWalletPressed = async () => { //TODO: implement\r\n   const walletResponse = await connectWallet();\r\n   setStatus(walletResponse.status);\r\n   setWallet(walletResponse.address);\r\n  };\r\n\r\n  const onMintPressed = async () => { //TODO: implement\r\n    const { status } = await mintNFT(Amount);\r\n    setStatus(status);\r\n  };\r\n\r\n  async function mintClicked() {\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n    const signer = provider.getSigner();\r\n    const NFTcontract = new ethers.Contract(contractAddress,contractABI, signer);\r\n    let amt = Amount;\r\n    let overrides = {\r\n      value: ethers.utils.parseEther(amt),\r\n    };\r\n    let tx = await NFTcontract.mintWAPFIDutchAuction(overrides);\r\n  }\r\n\r\n  return (\r\n    <div className=\"Minter\">\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <br></br>\r\n      <h1 id=\"title\"> WAPFi NFT Minter</h1>\r\n      <p>\r\n      WAPFi (Wet Ass Personal Finance) – Is the first token to launch using the Testudo Rising Floor Concept. \r\n      A portion of each trade goes to a holding account to back the token in BNB. This value can be retrieved by burning a token. \r\n      Later this year Testudo will be enhancing the contract to enable interest free access to the backing value through staking. \r\n      Whitelisted members can mint a Wet Ass NFT bellow and once the Mint Period ends they will be able to claim their tokens.\r\n      </p>\r\n      <form>\r\n        <h2>Amount: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Please enter an Amount of BNB between 0.1 and 2\"\r\n          onChange={(event) => setName(event.target.value)}\r\n        />\r\n      </form>\r\n     {/*  <button id=\"mintButton\" onClick={onMintPressed}>\r\n        Mint NFT\r\n      </button>\r\n      <button id=\"mintButton2\" onClick={WAPFimint}>\r\n        Mint NFT 2\r\n      </button> */}\r\n      <button id=\"mintButton3\" onClick={mintClicked}>\r\n        Mint WAPFi NFT and tokens\r\n      </button>\r\n      <p id=\"status\">\r\n        {status}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Minter;\r\n\r\n","import './App.css';\r\nimport Minter from './Minter'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Minter></Minter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}